datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? @db.Text
    expires_at               Int?
    refresh_token_expires_in Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String       @id @default(cuid())
    name          String?
    username      String?      @unique
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    submissions   Submission[]
    votes         Vote[]
}

model Task {
    id          String       @id @default(cuid())
    createdAt   DateTime     @default(now())
    expiresAt   DateTime
    title       String
    description String?
    submissions Submission[]
}

model Submission {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    userId      String
    taskId      String
    title       String
    description String?
    url         String
    image       String?
    source      String?
    winner      Boolean  @default(false)
    task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    votes       Vote[]
}

model Vote {
    id           String     @id @default(cuid())
    createdAt    DateTime   @default(now())
    userId       String
    submissionId String
    user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
}
